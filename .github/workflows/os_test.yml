name: CI Pipeline

on:
  push:
    branches:
      - precompilation
    # paths:
    #   - 'gbrl/**'   # Trigger on changes to files in the src directory
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest]
        python-version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov g++ gcc

    - name: Install dependencies on MacOs
      if: matrix.os == 'macos-latest'
      run: |
        brew install libomp llvm
        # Dynamic paths for Homebrew-installed tools
    - name: Set up LLVM and environment
      run: |
        echo "Adding LLVM to path"
        export PATH="$(brew --prefix llvm)/bin:$PATH"
        which clang
        which clang++

    - name: Install Python dependencies and build the project with coverage
      run: |
        python -m pip install --upgrade pip
        BREW_PREFIX=$(brew --prefix)
        LLVM_PREFIX=$(brew --prefix llvm)
        LIBOMP_PREFIX=$(brew --prefix libomp)
        echo $LIBOMP_PREFIX

        export LDFLAGS="-L${LIBOMP_PREFIX}/lib -L${LLVM_PREFIX}/lib -L${LLVM_PREFIX}/lib/c++ -Wl,-rpath,${LLVM_PREFIX}/lib/c++"
        export CPPFLAGS="-I${LIBOMP_PREFIX}/include -I${LLVM_PREFIX}/include"
        export CC="$(brew --prefix llvm)/bin/clang"
        export CXX="$(brew --prefix llvm)/bin/clang++"
        export PATH="${LLVM_PREFIX}/bin:$PATH"
        export DYLD_LIBRARY_PATH="${LLVM_PREFIX}/lib:${LIBOMP_PREFIX}/lib:$DYLD_LIBRARY_PATH"
        DEBUG=1 pip install . -v

    - name: Check linked libraries
      run: |
        # Find the .so file generated by pybind11
        module_file=$(find gbrl/ -name "*.so")
        if [ -z "$module_file" ]; then
            echo "Pybind11 module not found"
            exit 1
        fi
        echo "Found module: $module_file"
        
        # Inspect the linked libraries
        otool -L $module_file
    - name: Run tests under lldb
      continue-on-error: true
      run: |
        BREW_PREFIX=$(brew --prefix)
        LLVM_PREFIX=$(brew --prefix llvm)
        LIBOMP_PREFIX=$(brew --prefix libomp)
        echo $LIBOMP_PREFIX

        export LDFLAGS="-L${LIBOMP_PREFIX}/lib -L${LLVM_PREFIX}/lib -L${LLVM_PREFIX}/lib/c++ -Wl,-rpath,${LLVM_PREFIX}/lib/c++"
        export CPPFLAGS="-I${LIBOMP_PREFIX}/include -I${LLVM_PREFIX}/include"
        export CC="$(brew --prefix llvm)/bin/clang"
        export CXX="$(brew --prefix llvm)/bin/clang++"
        export PATH="${LLVM_PREFIX}/bin:$PATH"
        export DYLD_LIBRARY_PATH="${LLVM_PREFIX}/lib:${LIBOMP_PREFIX}/lib:$DYLD_LIBRARY_PATH"
        lldb python << EOF
        run -m unittest discover tests
        EOF
    - name: Run tests
      run: |
        BREW_PREFIX=$(brew --prefix)
        LLVM_PREFIX=$(brew --prefix llvm)
        LIBOMP_PREFIX=$(brew --prefix libomp)
        echo $LIBOMP_PREFIX

        export LDFLAGS="-L${LIBOMP_PREFIX}/lib -L${LLVM_PREFIX}/lib -L${LLVM_PREFIX}/lib/c++ -Wl,-rpath,${LLVM_PREFIX}/lib/c++"
        export CPPFLAGS="-I${LIBOMP_PREFIX}/include -I${LLVM_PREFIX}/include"
        export CC="$(brew --prefix llvm)/bin/clang"
        export CXX="$(brew --prefix llvm)/bin/clang++"
        export PATH="${LLVM_PREFIX}/bin:$PATH"
        export DYLD_LIBRARY_PATH="${LLVM_PREFIX}/lib:${LIBOMP_PREFIX}/lib:$DYLD_LIBRARY_PATH"
        python -m unittest discover tests
        # lldb -- python -m unittest discover tests



