name: CI Pipeline

on:
  push:
    branches:
      - precompilation
    # paths:
    #   - 'gbrl/**'   # Trigger on changes to files in the src directory
  pull_request:
    branches:
      - master
  workflow_dispatch:

jobs:
  build-and-test:
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [macos-latest, 'windows-latest']
        python-version: ['3.10']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Install dependencies on Ubuntu
      if: matrix.os == 'ubuntu-latest'
      run: |
        sudo apt-get update
        sudo apt-get install -y lcov g++ gcc

    - name: Install dependencies on MacOs
      if: matrix.os == 'macos-latest'
      run: |
        brew install gcc libomp
        # Dynamic paths for Homebrew-installed tools

    - name: Install Python dependencies and build the project mac
      if: matrix.os == 'macos-latest'
      run: |
        python -m pip install --upgrade pip
        export CPPFLAGS="-I$(brew --prefix libomp)/include"
        export OpenMP_ROOT=$(brew --prefix libomp)
        export CXX="/usr/bin/g++"
        export CC="/usr/bin/gcc"
        pip install . -v
        module_file=$(find gbrl/ -name "*.so")
        install_name_tool -change /opt/homebrew/opt/libomp/lib/libomp.dylib @loader_path/include/libomp/libomp.dylib $module_file
    
    - name: Install Python dependencies and build the project windows
      if: matrix.os == 'windows-latest'
      run: |
        python -m pip install --upgrade pip
        pip install . -v

    - name: Check linked libraries Mac
      if: matrix.os == 'macos-latest'
      run: |

        module_file=$(find gbrl/ -name "*.so")
        if [ -z "$module_file" ]; then
            echo "Pybind11 module not found"
            exit 1
        fi
        echo "Found module: $module_file"
        
        # Inspect the linked libraries
        otool -L $module_file
    
    # - name: Check linked libraries Windows
    #   if: matrix.os == 'windows-latest'
    #   shell: powershell
    #   run: |
    #     $module_file = Get-ChildItem gbrl\ -Filter "*.pyd"
    #     if ($null -eq $module_file) {
    #       Write-Error "Pybind11 module not found"
    #       exit 1
    #     }
    #     dumpbin /DEPENDENTS $module_file
    - name: Run tests without env variables
      continue-on-error: true
      run: |
        # if [ "${{ matrix.os }}" == 'macos-latest' ]; then
        #   export DYLD_LIBRARY_PATH="${PWD}/gbrl/include/libomp"
        # fi
        python -m unittest discover tests



